463. One to Few

{
  first: 'Harry',
  last: 'Bahadur',
  _id: new ObjectId("64a475c0701d16b66686fcc8"),
  addresses: [
    {
      street: '123 Main St',
      city: 'NewYork',
      state: 'NewYork',
      country: 'USA',
      _id: new ObjectId("64a475c0701d16b66686fcc9")
    }
  ],
  __v: 0
}


Mongo will create a seperate ID for each address. This is called subdocument.
Can avoid this by using _id: {id:false}



// 465. Mongoose Populate
Farm.findOne({ name: 'Tim Farm' })
    .populate('products')
    .then(farm => console.log(farm))

.populate('products')  this will populate all the datas from the reference model


466. One to "Bajillions"
const findTweet = async () => {
    const t = await Tweet.findOne({});
    console.log(t)
}

{
  _id: new ObjectId("64a4a0dcbc88690151dfc4ad"),
  text: 'I love Nepal',
  user: [ new ObjectId("64a4a0dcbc88690151dfc4aa") ],
  __v: 0
}


const findTweet = async () => {
    const t = await Tweet.findOne({}).populate('user');
    console.log(t)
}

{
  _id: new ObjectId("64a4a0dcbc88690151dfc4ad"),
  text: 'I love Nepal',
  user: [
    {
      _id: new ObjectId("64a4a0dcbc88690151dfc4aa"),
      username: 'Asim',
      age: 24,
      __v: 0
    }
  ],
  __v: 0
}
