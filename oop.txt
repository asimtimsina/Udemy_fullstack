302. What On Earth Are Prototypes

Create new prototypes with the Prototype tool

String.prototype.yell = function () {
    return (`OMG!!! ${this.toString().toUpperCase()}!!!`)
}
const test = "asimo"
test.yell();


303. Intro to Object Oriented Programming

304. Factory Functions

function makeColor(r, g, b) {
    const color = {};
    color.r = r;
    color.g = g;
    color.b = b;
    color.rgb = function () {
        const { r, g, b } = this;
        return `rgb(${r},${g},${b})`
    }

    color.hex = function () {
        const { r, g, b } = this;
        return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
    }
    return color;
}

const firstColor = makeColor(35, 355, 150);
firstColor.rgb()
firstColor.hex()


305. Constructor Functions

function Color(r, g, b) {
    this.r = r;
    this.g = g;
    this.b = b;
}

creates a blank, plain JavaScript object;
links (sets the constructor of) this object to another object;
passes the newly created object from Step 1 as the this context;
returns this if the function doesn't return an object.


Must use new keyword
define functions outside the constructor
cannot use arrow functions as methods

function Color(r, g, b) {
    this.r = r;
    this.g = g;
    this.b = b;
}

Color.prototype.rgb = function () {
    const { r, g, b } = this;
    return `rgb(${r},${g},${b})`
}

306. JavaScript Classes

class Color{
    constructor(r,g,b){
        //runs immediately   
    }
    rgb(r, g, b) {

        return `rgb(${this.r},${this.g},${this.b} )`
    }

    hex = function () {
        const { r, g, b } = this;
        return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
    }
}

can define methods inside the class
methods are automatically added to the prototype
no commas between methods
no function keyword before method names
must use this keyword to set properties of the object or use the constructor function



308. Extends and Super Keywords
Inheritance is a mechanism that allows you to eliminate redundant code.

extends -> keyword used in class declarations or class expressions to create a class as a child of another class.
super -> keyword used to access and call functions on an object's parent.


Basics of Terminal

Terminal -> A text based interface to the system. You are able to enter commands by typing them on the keyboard and feedback will be given to you similarly as text.
Shell -> A program which processes commands and returns output , like Terminal.
Bash -> One of the most popular shell for linux. It stands for Bourne Again SHell.
Shell Script -> A script or program which is run by the shell, or a utility to automate programming tasks.


ls -> list directory contents
ls - l -> list directory contents in long format
ls - a -> list directory contents including hidden files

pwd -> print working directory

cd -> change directory
cd .. -> go up one directory
cd ../.. -> go up two directories
cd ~ -> go to home directory
cd - -> go to previous directory

Absolute Path -> A file or directory location in relation to the root of the file system. The root is the highest level directory, and all other directories can be reached by entering their path after the root.
Relative Path -> A file or directory location relative to where we currently are in the file system.

mkdir -> make directory
mkdir -p -> make parent directories as needed
touch -> create new file
rm -> remove file
rm -r -> remove directory
rm -f -> force remove file
rm -rf -> force remove directory
cp -> copy file
cp -r -> copy directory
mv -> move/rename file
mv -r -> move/rename directory
cat -> output the contents of a file
less -> view file contents in the terminal
head -> output the first lines of a file

man -> manual 
