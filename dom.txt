245. The Document Object

console.dir(document) // shows all the properties and methods of the document object


246. getElementById

selects an element by its id

const banner = document.getElementById('banner')
console.log(banner)


247. getElementsByTagName & className

document.getElementsByTagName('p') // returns an HTMLCollection of all the elements with the tag name p
document.getElementsByClassName('paragraph') // returns an HTMLCollection of all the elements with the class name paragraph
document.getElementByClassName('paragraph')[0] // returns the first element with the class name paragraph


248. querySelector & querySelectorAll
document.querySelector('p') // returns the first element that matches the selector
document.querySelectorAll('p') // returns a NodeList of all the elements that match the selector

document.querySelector('#banner') // returns the first element with the id banner
document.querySelector('.paragraph') // returns the first element with the class paragraph
document.querySelectorAll('.paragraph') // returns a NodeList of all the elements with the class paragraph


249. innerHTML, textContent, & innerText
Properties of DOM elements
classList
getAttribute() // returns the value of the attribute
setAttribute() // sets the value of the attribute
appendChild()
append()
prepend()
removeChild()
remove()
createElement()
innerText // returns the text inside the element
innerHTML // returns the HTML inside the element
textContent // returns the text inside the element
value
parentElement
children
nextSibling
previousSibling
style // returns/changes the style object //style only contain inline styles



251. Changing Styles
 returns/changes the style object 
 style only contain inline styles
to access all the styles use window.getComputedStyle(h1);



const h1 = document.querySelector('h1');
window.getComputedStyle(h1);
window.getComputedStyle(h1).color;
window.getComputedStyle(h1).textAlign;


h1.style.color = 'red';
h1.style.backgroundColor = 'blue';
h1.style.textAlign = 'center';


252. ClassList
classList is a read-only property that returns a DOMTokenList collection of the class attributes of the element.
classList is not an array, it is a collection of strings (tokens).



const h2 = document.querySelector('h2')
h2.class //undefined
h2.getAttribute('class') //undefined
h2.setAttribute('class','purple') // class='purple'

h2.classList.add('purple') // adds purple
h2.classList.add('pink') // adds pink
h2.classList.remove('red') //removes red
h2.classList.contains('pink') // true
h2.classList.contains('red') // false
h2.classList.toggle('red') // true
h2.classList.toggle('red') // false



253. Traversing Parent/Child/Sibling

//each element can only have one parent
const firstbold = document.querySelector('b')
firstbold.parentElement
firstbold.parentElement.parentElement

const paragraph = firstbold.parentElement
paragraph.children
paragraph.childElementCount
paragraph.children[0]

const sqrImg = document.querySelector('.square')

sqrImg.nextSibling // returns the text node 
sqrImg.previousSibling // returns the text node

sqrImg.previousElementSibling // returns the previous element
sqrImg.nextElementSibling // returns the next element


254. Append & AppendChild
creating a new element or appending new elements to the DOMTokenList
append is a new method that allows you to append multiple elements and strings to the DOM

const newImg = document.createElement('img')
newImg.src = ' ' 
document.body.appendChild(newImg)
newImg.classList.add('square')

const h3 = document.createElement('h3')
h3.innerText = 'Creating new element')
document.body.appendChild(h3)

const p = document.createElement('p')
paragraph.append('I am a new text!!!!!')
paragraph.appendChild('I am a new text!!!!!')   // this will not work //appendChild can only add nodes not plain text
paragraph.append('I am a newer text!!!!!', 'I am the newest!!!') // this will work // add multiple elements and strings to the DOM

Prepend & insertAdjacentElement
paragraph.prepend('Starting')
paragraph.prepend('Starting', 'Second') // add multiple elements and strings to the DOM

const h2 = document.createElement('h2')
h2.append("Asim is the best")
const h1 =document.querySelector('h1')
h1.insertAdjacentElement('afterend',h2)

where -> beforebegin, afterbegin, beforeend, afterend

const h3 = document.createElement('h3')
h3.innerText = 'I am a new H3'
h1.after(h3)



255. removeChild & remove
cannot remove the element itself, only the child elements
so need to call the parent element first to delete the child element

const firstli = document.querySelector('li')
const parentul = firstli.parentElement
parentul.removeChild(firstli)

const b = document.querySelector('b')
b.parentElement.removeChild(b) // this will work in a single line. no need to create a variable for the parent element


remove() can be called directly on the element itself
const img= document.querySelector('img')
img.remove()


258. Intro to Events
clicks
drags
drops
hovers
form submission
key presses
focus/blur
scrolling
mouse wheel
double clicks
copying
pasting
audio start/stop/pause
video start/stop/pause
screen resize
printing


259. Inline Events
    <button id="btn" onclick="alert('You Clicked Me!')">Click Me</button>
    <button id="btn" onclick="console.log('You Clicked Me!')">Click Me</button>


260. The Onclick Property
const btn = document.querySelector('#btn')
btn.onclick = function () {
    alert('You Clicked Me!')
}
Similar functions like onclick -> hover, mouseover, mouseout, dblclick, childElementCount


261. addEventListener
// addEventListener allows multiple functions to add to a element whereas onclick doesn't.
addEventListener takes two arguments, the event and the callback function. Also has optional parameters like once, capture, passive

const btnV4 = document.querySelector("#btnV4")

btnV4.addEventListener('click', function () {
    alert("You clicked V4.")
})


262. Random Color Exercise

const btncolor = document.querySelector("#btncolor");

btncolor.addEventListener('click', function () {
    const r = Math.floor(Math.random() * 255);
    const g = Math.floor(Math.random() * 255);
    const b = Math.floor(Math.random() * 255);
    document.body.style.backgroundColor = `rgb(${r},${g},${b})`;
})


263. Events & The Keyword This
Can use this keyword to refer to the element that the event is added to
const btn = document.querySelector('#btn')
btn.addEventListener('click', function () {
    console.log(this) // this refers to the button element
    this.style.backgroundColor = 'red'
})


264. Keyboard Events & Event Objects