428. Using Morgan - Logger Middleware

morgan('tiny') -> gets info about the request and logs it to the console

app.use(morgan('tiny')); 



429. Defining Our Own Middleware

app.use() -> takes a function as an argument
we can define our own middleware function
must have the req, res, and next arguments in that order
next() -> must be called at the end of the function to move on to the next middleware function



430. More Middleware Practice
app.use((req, res, next) => {
    console.log(req.method.toUpperCase(), req.path);
    next();

})


431. Setting Up A 404 Route

can use path in app.use() to specify a route
app.use('/dogs', () => {
    console.log('I love dogs!');
})

app.use('/cats', (req, res) => {
    res.send('MEW MEW!')
})
this will only run if the path is /cats and will catch all HTTP verbs (get, post, etc.)


432. Password Middleware Demo (NOT REAL AUTH)

app.use((req, res, next) => {
    console.log(req.query);
    const { password } = req.query;
    console.log(password);
    if (password === 'admin') {
        next();
    }
    else {
        res.send("Authenication error")
    }

})


http://localhost:3000/dogs?password=admin
Authenication

http://localhost:3000/dogs?password=admin
Authenication error


433. Protecting Specific Routes


can use multiple callback functions in app.use() or app.get() 

const verify = (req, res, next) => {
    console.log(req.query);
    const { password } = req.query;
    console.log(password);
    if (password === 'admin') {
        next();
    }
    else {
        res.send("Authenication error")
    }

}

app.use('/secret', verify, (req, res) => {
    res.send('The Secret is NOTHING!')
})



444. Express' Built-In Error Handler

throw new Error("Password Required!")
-> will throw an error and stop the code from running


445. Defining Custom Error Handlers

Define error-handling middleware functions in the same way as other middleware functions, except error-handling functions have four arguments instead of three: (err, req, res, next). For example:

app.use(function(err, req, res, next) {
  console.error(err.stack);
  res.status(500).send('Something broke!');
});



447. Handling Async Errors

must use next(err) to pass the error to the error handler


const data = await Product.findOne({ name: 'Guitar' });

if (!data) {
    next(new AppError('Product Not Found', 404));
}