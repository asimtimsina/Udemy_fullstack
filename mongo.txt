381. The Mongo Shell

mongo or mongosh to start the shell
monogo 


db -> current database
show dbs -> show all databases
use <db> -> switch to database
show collections -> show all collections in current database

use animalShelter -> switch to animalShelter database and if not exist, create it



382. What On Earth Is BSON?

BSON -> Binary JSON
JSON -> JavaScript Object Notation
BSON is a binary representation of JSON-like documents
BSON is a binary serialization format used to store documents and make remote procedure calls in MongoDB
BSON is designed to be lightweight, traversable, and efficient
BSON supports more data types than JSON
BSON Supports String, boolean, Number (Integer, Float, Long, Decimal 128), Array, Date, Raw Binary, ObjectID, Null, Regular Expression, DBPointer, JavaScript, Symbol, JavaScript (with scope), 32-bit integer, Timestamp, 64-bit integer, Decimal 64, Min key, Max key


383. Inserting With Mongo

https://www.mongodb.com/docs/manual/tutorial/insert-documents/

db.collection.insertOne() inserts a single document into a collection.
db.collection.insertMany([]) inserts multiple documents into a collection.
db.collection.insert() inserts a single document or multiple documents into a collection. This method is a shell wrapper around the insertOne() and insertMany() methods.

db.dogs.insertOne({name:"Charlie", age:3, breed:"corgi", catFriendly: true})
db.dogs.insert({name:"Jhuse", age:5, catFriendly: true, breed:"bhusiya"}, {name:"gori",  age:7 ,catFriendly:false, breed:"seti"})

db.cats.insert({name:"Suri", age:3}, {name:"Meow", age:4})

db.dogs.find() -> find all documents in dogs collection

_id is a unique identifier for each document in a collection
_id is automatically generated by MongoDB if not provided


384. Finding With Mongo

animalShelter> db.dogs.find({name:"Charlie"})

[
  {
    _id: ObjectId("649db468f5f2e8625bde57ed"),
    name: 'Charlie',
    age: 3
  },
  {
    _id: ObjectId("649db47df5f2e8625bde57ee"),
    name: 'Charlie',
    age: 3,
    breed: 'corgi',
    catFriendly: true
  }
]

animalShelter> db.dogs.find({name:"suri"})
--nothing

animalShelter> db.dogs.find({name:"Charlie", catFriendly:true})

db.dogs.findOne({name:"Charlie", catFriendly:true})
only returns one document


385. Updating With Mongo

Two step -> Find thee document you want to update and then update it

db.collection.updateOne(<filter>, <update>, <options>) -> update the first document that matches the filter
db.collection.updateMany(<filter>, <update>, <options>) -> update all documents that match the filter
db.collection.replaceOne(<filter>, <update>, <options>) -> replace the first document that matches the filter

must use operators to update the document
$set -> set a field to a value
$currentDate -> set a field to the current date
$inc -> increment a field's value
$min -> only update the field if the specified value is less than the existing field value
$max -> only update the field if the specified value is greater than the existing field value
$mul -> multiply the value of a field by the specified amount
$rename -> rename a field


db.dogs.updateOne({name:'gori'},{$set: {age:8}})
db.dogs.updateOne({ name: 'gori' }, { $set: { color:"white" } }) -> add new field
db.dogs.updateMany({catFriendly:true},{$set: {isAvailable: false}})

db.cats.updateOne({age:3}, {$set :{isAvailable: true}, $currentDate: {lastModified : true}})
{
    _id: ObjectId("649db640f5f2e8625bde57f2"),
    name: 'Suri',
    age: 3,
    isAvailable: true,
    lastModified: ISODate("2023-06-29T17:09:49.876Z")
  }



386. Deleting With Mongo

db.collection.deleteMany()
db.collection.deleteOne()

 db.dogs.deleteOne({name:'gori'})
 db.dogs.deleteMany({name:'Jhuse'})
 db.dogs.deleteMany({}) -> delete all documents in dogs collection


 387. Additional Mongo Operators

db.dogs.find({'personality.childFriendly': true}) -> find all dogs that have a childFriendly property that is true
db.dogs.find({'personality.childFriendly': {$exists: true}}) -> find all dogs that have a childFriendly property

Comaprison Operators

$eq     Matches values that are equal to a specified value.
$gt     Matches values that are greater than a specified value.
$gte    Matches values that are greater than or equal to a specified value.
$in     Matches any of the values specified in an array.
$lt     Matches values that are less than a specified value.
$lte    Matches values that are less than or equal to a specified value.
$ne     Matches all values that are not equal to a specified value.
$nin    Matches none of the values specified in an array.

{ field: { $gt: value } } -> find all documents where the value of the field is greater than the specified value.
{ field: { $in: [<value1>, <value2>, ... <valueN> ] } } -> find all documents where the value of the field equals any value in the specified array.
{ field: { $ne: value } } -> find all documents where the value of the field is not equal to the specified value.


$and        Joins query clauses with a logical AND returns all documents that match the conditions of both clauses.
$not        Inverts the effect of a query expression and returns documents that do not match the query expression.
$nor        Joins query clauses with a logical NOR returns all documents that fail to match both clauses.
$or         Joins query clauses with a logical OR returns all documents that match the conditions of either clause.

 { $and: [ { <expression1> }, { <expression2> } , ... , { <expressionN> } ] }



$exists     Matches documents that have the specified field.
$type       Selects documents if a field is of the specified type