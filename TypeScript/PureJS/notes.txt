tsc --init

Also npm init -y to create package.json file

tsc -w 
launch in launch mode
saves the ts file in dist/ folder

on tsconfig.json file
update outDir to the output folder (js files)
"outDir": "./dist", /* Specify an output folder for all emitted files. */



//better way of defining a class
class User {
    readonly city: string = ""
    constructor(
        public email: string,
        public name: string,
        private userId: string
    ) {
        this.email = email;
        this.name = name;
        this.userId = userId;
    }
}


Getter and Setter

    get courseCount(): number {
        return this._courseCount;
    }

    set courseCount(courseNum) {
        if (courseNum <= 1) {
            throw new Error("Course count should be more than 1")
        }
        this._courseCount = courseNum;
    }

setter cannot have a return type at all. Not even void or never

Can have private methods too

private deleteToken() {
    return "Token deleted"
}


Inheritance

Inherited class cannot acquire private properties of the parent class
So we use protected instead of private


class SubUser extends User {

    isFamily: boolean = true;

    changeCourseCount() {
        this._courseCount = 4;
    }
}


Why interface is important

interface TakePhoto {

    cameraMode: string
    filter: string
    burst: Number

}


class Instragram implements TakePhoto{

}

Class 'Instragram' incorrectly implements interface 'TakePhoto'.
  Type 'Instragram' is missing the following properties from type 'TakePhoto': cameraMode, filter, burstts(2420)


Cannot make an instance from an abstract class



Generics

function identityThree<Type>(val: Type): Type {
    return val;
}

function identityFour<T>(val: T): T {
    return val;
}
// identityThree and identityFour are exactly the same
identityThree(true)

function getSearchProducts<T>(products: T[]): T {
    return products[3]
}

// converting same function to arrow function

const getSearchProducts1 = <T>(products: T[]): T => {
    return products[3]

}