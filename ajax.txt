AJAX -> Asynchronous JavaScript and XML
AJAJ -> Asynchronous JavaScript and JSON
JSON -> JavaScript Object Notation
Key valuepairs with quotes around the keys and values


290. WTF is JSON
Json.parse() -> converts JSON to JS object
Json.stringify() -> converts JS object to JSON

291. Using Hoppscotch (or Postman)
Hoppscotch -> https://hoppscotch.io/
Postman -> https://www.postman.com/




292. HTTP Verbs
GET -> Retrieve data from a server
POST -> Send data to a server
PUT -> Update data already on a server
DELETE -> Delete data on a server

Informational responses (100 – 199)
Successful responses (200 – 299)
Redirection messages (300 – 399)
Client error responses (400 – 499)
Server error responses (500 – 599)

200 OK
204 No Content
301 Moved Permanently
305 Use Proxy 
400 Bad Request
401 Unauthorized
402 Payment Required
403 Forbidden
404 Not Found

294. Understanding Query Strings
Query strings are used to send data to the server as part of a GET request
Query strings are added to the end of the URL
Query strings start with a question mark (?)
Query strings are made up of key-value pairs
Query strings are separated by an ampersand (&)
Query strings are formatted like this: ?key1=value1&key2=value2



295. HTTP Headers
HTTP headers are used to send data to the server as part of a GET request
HTTP headers are added to the request
HTTP headers are made up of key-value pairs
HTTP headers are separated by a colon (:)
HTTP headers are formatted like this: key1: value1

https://icanhazdadjoke.com/
Normally this endpoint returns HTML
In order to get the JSON formatted data, Goto Headers tab
Accept: application/json


296. Making XHRs
XMLHttpRequest (XHR) objects are used to interact with servers
You can retrieve data from a URL without having to do a full page refresh
This enables a more responsive user experience
You can retrieve data in a background process without affecting the display and behavior of the existing page
You can send data to a server in the background without affecting the display and behavior of the existing page

new XMLHttpRequest(); // creates a new XHR object
req.onload = function (){} // onload is an event handler
req.onerror = function () {} // onerror is an error handler
req.open("GET", "url") // open() initializes a newly-created request
req.send() // send() sends the request to the server



297. Using The Fetch API
The Fetch API is a modern replacement for XMLHttpRequest (XHR)
The Fetch API is built into the global scope
The Fetch API uses Promises

fetch("url")
fetch returns as soon as it gets the headers so it might not have all the contents 
so need to call res.json() to get the data which also returns the Promises.
fetch("url").then((res) => res.json()).then((data) => console.log(data))

fetch("https://swapi.dev/api/people/1")
    .then(res => {
        console.log('Resolved')
        console.log(res)
        return res.json()
    })
    .then(data => {
        console.log('JSON done', data)
    })
    .catch(err => {
        console.log('Error')
        console.log(err)
    })

use await and async to make the code more readable

const loadStarwarsPeople = async () => {
    const res = await fetch("https://swapi.dev/api/people/1");
    data = await res.json()
    console.log(data)
}



298. Introducing Axios
Axios is a library that makes it easy to make HTTP requests to external resources
Axios is a JavaScript library
Axios is a Promise-based library
Axios is a modern replacement for XMLHttpRequest (XHR)
Axios is not built into the global scope
Axios is not built into the JavaScript language
Axios is not built into web browsers

https://github.com/axios/axios/blob/v1.x/README.md#installing
<script src="https://cdn.jsdelivr.net/npm/axios@1.1.2/dist/axios.min.js"></script>


axios.get('https://swapi.dev/api/people/1')
    .then(response => {
        console.log(response)
    })
    .catch(err => {
        console.log("Error")
        console.log(err)
    })

//no need to convert to json

use await and async to make the code more readable
const getStarWarsPerson = async (id) => {
    const res = await axios.get(`https://swapi.dev/api/people/${id}`)
    console.log(res.data)

}
getStarWarsPerson(3)