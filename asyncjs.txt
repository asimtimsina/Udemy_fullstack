277. The Call Stack
    // 277. The Call Stack -> LIFO


278. WebAPIs & Single Threaded
Single JS thread is running in the browser at a time

JS is going to hand out some task to the browser, and the browser is going to handle it

279. Callback Hell :(

    
// searchMoviesAPI('amadeus', () => {
//     savetomyDB(movies, () => {
//         //if works // success
//     }), () => {
//         //if fails
//     }
// })



280. Demo: fakeRequest Using Callbacks


281. Demo: fakeRequest Using Promises

Promise is an object representing the eventual completion or failure of an asynchronous operation
A promise is a returned object to which you attach callbacks, instead of passing callbacks into a function
A promise is in one of these states: pending, fulfilled, rejected
Callbacks you attach to a promise with then() will be called when the promise is fulfilled or rejected


.then() -> if the promise is fulfilled, then do this
.catch() -> if the promise is rejected, then do this
