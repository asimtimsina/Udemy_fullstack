277. The Call Stack
    // 277. The Call Stack -> LIFO


278. WebAPIs & Single Threaded
Single JS thread is running in the browser at a time

JS is going to hand out some task to the browser, and the browser is going to handle it

279. Callback Hell :(

    
// searchMoviesAPI('amadeus', () => {
//     savetomyDB(movies, () => {
//         //if works // success
//     }), () => {
//         //if fails
//     }
// })



280. Demo: fakeRequest Using Callbacks


281. Demo: fakeRequest Using Promises

Promise is an object representing the eventual completion or failure of an asynchronous operation
A promise is a returned object to which you attach callbacks, instead of passing callbacks into a function
A promise is in one of these states: pending, fulfilled, rejected
Callbacks you attach to a promise with then() will be called when the promise is fulfilled or rejected


.then() -> if the promise is fulfilled, then do this
.catch() -> if the promise is rejected, then do this


282. The Magic Of Promises
fakeRequestPromise('yelp.com/api/coffee/1')
    .then(() => {
        console.log("It worked Page(1)")
        return fakeRequestPromise('yelp.com/api/coffee/2')
    })
    .then(() => {
        console.log("It worked Page(2)")
        return fakeRequestPromise('yelp.com/api/coffee/3')
    })
    .then(() => {
        console.log("It worked Page(1)")
    })
    .catch(() => {
        console.log("Oh no, A request failed")
    })


283. Creating Our Own Promises

new Promise((resolve, reject) => {
    resolve();
})


fakeRequest('/dogs/1')
    .then((data) => {
        console.log("Done with request")
        console.log("data is:", data)
    })
    .catch((err) => {
        console.log("Oh no!", err)
    })


284. The Async Keyword
Async functions always return a promise
If the function returns a value, the promise will be resolved with that value
If the function throws an exception, the promise will be rejected

const hi = async () => {
    return 'Hi Hi HI'
}

async function hello() {
    //if throw is used then the promise is rejected. Otherwise resolved
    throw "Oh No."
}