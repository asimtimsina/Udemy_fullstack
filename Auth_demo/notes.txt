511. Auth Demo: Setup


512. Auth Demo: Registering
Take the username and password from form 
Use decrypt to decrypt the password.


app.post('/register', async (req, res) => {

    const { user } = req.body;
    const hashedPw = await bcrypt.hash(user.password, 12);

    const newUser = new User({
        username: user.username,
        password: hashedPw
    })

    await newUser.save();
    res.redirect('/');
})



513. Auth Demo: Login

app.post('/login', async (req, res) => {
    const { user } = req.body;

    const finduser = await User.findOne({ username: user.username })
    // console.log(finduser);
    if (!finduser) {
        res.send("Incorrect username or password")
    } else {
        // console.log(user.password, finduser.password)
        const validPassword = await bcrypt.compare(user.password, finduser.password);
        if (validPassword) {
            res.send("Welcome, You're logged in")
        }
        else {
            res.send("Sorry, Incorrect username or password")
        }

    }


})



514. Auth Demo: Staying Logged In With Session

add to the session object after login or signup
req.session.user_id = finduser._id;



In the secret route, check if the user is logged in or not
app.get('/secret', (req, res) => {
    if (!req.session.user_id) {
        res.redirect('/login');
    } else {
        console.log('You cannot see me unless you are logged in')
        res.send('You cannot see me unless you are logged in')
    }

})

515. Auth Demo: Logging Out


app.post('/logout', (req, res) => {
    // req.session.user_id = '';
    delete req.session.user_id;
    res.redirect('/');
})



516. Auth Demo: Require Login Middleware


const requireLogin = (req, res, next) => {
    if (!req.session.user_id) {
        return res.redirect('/login');
    }
    next();
}