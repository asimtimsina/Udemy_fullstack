340. Introducing Express

Difference between Library and Framework

Frameworks and libraries are both code written by someone else that helps you perform some common tasks in a less verbose way.
A framework inverts the control of the program. It tells the developer what they need. A library doesn’t. The programmer calls the library where and when they need it.
The degree of freedom a library or framework gives the developer will dictate how “opinionated” it is.


Express 
Minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications.


341. Our Very First Express App

https://expressjs.com/en/starter/hello-world.html

npm init -y -> creates package.json file with default values // starting point of our app
npm i express -> Install Express


index.js
const express = require('express');

const app = express()
console.log(app)

app.listen() -> starts a UNIX socket and listens for connections on the given path. This method is identical to Node’s http.Server.listen().
app.use() -> Mounts the specified middleware function or functions at the specified path: the middleware function is executed when the base of the requested path matches path.



342. The Request & Response Objects

For every incoming request, we have a request object and a response object created by Express..
The request object contains all the information about the request that was made to the server.
The response object contains all the information about what we’re going to respond with.


app.use((req, res) => {
     console.dir(req)
     console.dir(res)
 })

res.send() -> sends a response of various types. It can be a Buffer object, a String, an object, or an Array.
res.send("Hello, we got your response!") -> sends a string
res.send({ color: "red" }) -> sends an object
res.send("<h1> Hello from Express.js </h1>") -> sends html



343. Express Routing Basics

Taking incoming requests and matching them to a particular route.


app.get(path, callback) -> Routes HTTP GET requests to the specified path with the specified callback functions.))

app.get('/', (req, res) => {
    res.send('<h1>Youre at Homepage</h1 > ')
}) 


set a generic response for all other routes
app.get('*', (req, res) => {
    res.send('<h1>404 Page Not Found</h1 > ')
})



344. Express Path Parameters

//define generic pattern with :variable
// can get the value of variable in req.params

const { subreddit } = req.params;
subreddit = req.params.subreddit

app.get('/r/:subreddit', (req, res) => {
    const { subreddit } = req.params;
    res.send(`<h1>Youre at subreddit ${subreddit} page.</h1 > `)
})



345. Working With Query Strings
Query Strings are the part of the url that comes after the question mark (?)
Query Strings are used to pass data to the server.

