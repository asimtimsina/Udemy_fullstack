595. The Basics of JSX

JSX is a syntax extension to JavaScript.
It is similar to a template language, but it has full power of JavaScript. 
JSX gets compiled to React.createElement() calls which return plain JavaScript objects called “React elements”. Babel compiles JSX down to React.createElement() calls.

It allows us to write markup that looks like HTML directly inside of our HTML.
It's not legal JS on it's own so it must be transpiled into JS.

Babel behind the scenes will take the JSX and convert it into React.createElement() calls.




596. Basic React App Structure

App is the root component of our application. Top level component.
App component is the parent of all other components.


597. Our First React Component

function Greeter() {
  return <h1>HELLO! </h1>;
}

export default function App() {
  return (
    <div className="App">
      <h1>Hello CodeSandbox!!</h1>
      <h2>Start editing to see some magic happen!</h2>
      <input type="text" />
      <Greeter/> 
      {/* Call the function */}
    </div>
  );
}


598. Importing and Exporting Components
One component per file.
We can import and export components from one file to another.

Use ES6 modules to import and export components.
import Greeter from "./Greeter.js";

But we first need to export something that can be imported

export 
default

export default function Greeter() {
  return <h1>HELLO! </h1>;
}

Can also do

 function Greeter() {
  return <h1>HELLO! </h1>;
}
export default Greeter;


Can also export multiple things from a file
export {dog, cat};
But must import them like this
import {dog, cat} from "./animals.js";


function add(x, y) {
  return x + y;
}
function multiple(x, y) {
  return x * y;
}
export { add, multiple };


599. The Rules of JSX

You must explicityly close all tags.  like <br> must be <br />.
You can only return a single element from a component.  You can't return two sibling elements.  You can wrap them in a div or a fragment.

export default function LoginForm() {
  return (
    <form>
      <label> ID </label>
      <input type="text " />
      <label> password </label>
      <input type="password " />
      <button> Submit </button>
    </form>
  );
}



600. React Fragments

Can use react fragments to wrap multiple elements.
<> </> or <React.Fragment> </React.Fragment>

export default function LoginForm() {
  return (
    <>
      <label> ID </label>
      <input type="text " />
      <label> password </label>
      <input type="password " />
      <button> Submit </button>
    </>
  );
}

601. Evaluating JS Expressions in JSX

We can evaluate JS expressions inside of JSX using curly braces.
{}
We can't use if statements or for loops inside of JSX.  We can use ternary operators.
 
const name = 'Bhusiya';
return <p> {name} says WOOOF </p>; -> Bhusiya says WOOOF


602. Creating. a Die Component

export default function Die() {
  const roll = Math.floor(Math.random() * 6 + 1);
  return <h1> Die Roll: {roll} </h1>;
}



603. Component Decomposition

import Die from "./Die";

export default function DiceHand() {
  return (
    <div>
      <Die />
      <Die />
      <Die />
    </div>
  );
}


604. Styling Components

Use className instead of class. 
className is a reserved word in JS.
Create a seperate css file and import it into the component file.
import "./Die.css";


605. Random PokeCard Exercise

import "./RandomPokemon.css";

export default function Pokemon() {
  const rand = Math.floor(Math.random() * 150 + 1);
  const url = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${rand}.png`;

  return (
    <div className="RandomPokemon">
      <h1 className="h1"> Random #{rand} </h1>
      <img className="pokeImg" alt="..." src={url} />
    </div>
  );
}



607. Creating React Apps With Vite

Vite is a build tool for modern web projects.

npm create vite@latest
Follow commands and create a react app.
install all dependencies using npm install
use npm run dev to start the server.



608. A Note About Create React App

Similar to vite but it's more mature and has more features.
It's a bit more complicated to use.


609. A Tour of A Vite App

New components are created in the src folder.
.jsx files are used instead of .js files.
index.html is the entry point of the app.
index.jsx is the entry point of the app.
index.html has a div with id="app" which is the root div of the app.



610. Introducing Props

Props are a way to pass data from a parent component to a child component.
Props are immutable.  They can't be changed by the child component.
Props are passed as attributes to the child component.



export default function Greeter(props) {
    console.log(props)
    return <h1>HELLO {props.person}!! </h1>
}

props is an object that contains all the props passed to the component.
props.person is the value of the person prop passed to the component.
can also destructure the props object

export default function Greeter({person}) {
    return <h1>HELLO {person}!! </h1>
}



611. Non-String Props
Use {} to pass non-string props.


612. Setting Default Prop Values

export default function Die({ numSides =6 }) {
    const roll = Math.floor(Math.random() * numSides + 1);
    return <p>{numSides} sided die roll: {roll}</p>
}


613. Passing Arrays and Objects


<ListPicker values={['Asim', 'Nick', 'Bish']} />
<ListPicker values={{a:1,b:2}} /> 
First {} is for JS expression and second {} is for object literal.

export default function ListPicker({ values }) {
    const randIndex = Math.floor(Math.random() * values.length);
    console.log(randIndex)
    return (
        <div>
            <p>Random value from the list is {values[randIndex]} </p>
        </div>
    )
